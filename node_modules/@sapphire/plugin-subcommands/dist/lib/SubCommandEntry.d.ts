import { Args, Awaitable, Command } from '@sapphire/framework';
import type { Message } from 'discord.js';
/**
 * @since 1.0.0
 * SubCommandEntry represents a basic subcommand entry. Methods and command names are supported in core.
 * @see {@link SubCommandEntryCommand}
 * @see {@link SubCommandEntryMethod}
 */
export declare abstract class SubCommandEntry<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> {
    readonly input: string | ((context: SubCommandEntry.MessageRunContext<ArgType, CommandType>) => Awaitable<string>);
    readonly output: string;
    constructor(options: SubCommandEntry.Options<ArgType, CommandType>);
    match(value: string, context: SubCommandEntry.MessageRunContext<ArgType, CommandType>): Promise<boolean>;
    abstract messageRun(context: SubCommandEntry.MessageRunContext<ArgType, CommandType>): unknown;
}
export declare namespace SubCommandEntry {
    /**
     * The options for a SubCommandEntry.
     * @property input Input represents the subcommand that the user will type in.
     * @property output Output represents the method/command called for the subcommand.
     * @example
     * ```typescript
     * subCommands: [{
     * 	input: ({ message }) => message.resolveKey('subcommands:set'),
     * 	output: 'set'
     * }]
     * ```
     */
    interface Options<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> {
        input: string | ((context: MessageRunContext<ArgType, CommandType>) => Awaitable<string>);
        output?: string;
    }
    /**
     * MessageRunContext is passed to SubCommandManager.messageRun() and to input (if it is a function)
     * @see {@link SubCommandEntry.Options}
     */
    interface MessageRunContext<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> {
        command: CommandType;
        message: Message;
        args: ArgType;
        context: Command.RunContext;
    }
}
//# sourceMappingURL=SubCommandEntry.d.ts.map