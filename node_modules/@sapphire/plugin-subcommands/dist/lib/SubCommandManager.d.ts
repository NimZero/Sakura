import { Args, Command } from '@sapphire/framework';
import type { SubCommandEntry } from './SubCommandEntry';
import { SubCommandEntryCommand } from './SubCommandEntryCommand';
export declare class SubCommandManager<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> {
    private readonly entries;
    private readonly default;
    constructor(entries: SubCommandManager.RawEntries<ArgType, CommandType>);
    messageRun(context: SubCommandEntry.MessageRunContext<ArgType, CommandType>): Promise<unknown>;
    protected resolve(value: string | SubCommandManager.Entry<ArgType, CommandType>): SubCommandManager.Entry<ArgType, CommandType>;
    static readonly handlers: Map<string, typeof SubCommandEntryCommand>;
}
export declare namespace SubCommandManager {
    type Type = 'command' | 'method';
    interface Entry<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> extends SubCommandEntry.Options<ArgType, CommandType> {
        type?: Type;
        default?: boolean;
    }
    type RawEntries<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> = readonly (string | Entry<ArgType, CommandType>)[];
}
//# sourceMappingURL=SubCommandManager.d.ts.map