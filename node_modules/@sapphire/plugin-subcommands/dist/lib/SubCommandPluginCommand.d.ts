import { Args, Awaitable, Command, PieceContext } from '@sapphire/framework';
import type { Message } from 'discord.js';
import { SubCommandManager } from './SubCommandManager';
export declare class SubCommandPluginCommand<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> extends Command<ArgType> {
    readonly subCommands: SubCommandManager<ArgType, CommandType> | null;
    constructor(context: PieceContext, options: SubCommandPluginCommandOptions<ArgType>);
    messageRun(message: Message, args: ArgType, context: Command.RunContext): Awaitable<unknown>;
}
export interface SubCommandPluginCommandOptions<ArgType extends Args = Args, CommandType extends Command<ArgType> = Command<ArgType>> extends Command.Options {
    subCommands?: SubCommandManager.RawEntries<ArgType, CommandType>;
}
export declare namespace SubCommandPluginCommand {
    /** Re-export of {@link Command.Context} */
    type Context = Command.Context;
    /** Re-export of {@link Command.RunContext} */
    type RunContext = Command.RunContext;
    /** Re-export of {@link Command.JSON} */
    type JSON = Command.JSON;
    /** Re-export of {@link Command.RunInTypes} */
    type RunInTypes = Command.RunInTypes;
    /**
     * The SubCommandPluginCommand Options
     */
    type Options = SubCommandPluginCommandOptions;
}
//# sourceMappingURL=SubCommandPluginCommand.d.ts.map